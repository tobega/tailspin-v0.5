---create empty structure
{ } !
={}
---create one property structure
{ foo: 1 } !
={ foo: 1 }
---create two property structure
{ foo: 1, bar: 3 } !
={ bar: 3, foo: 1 }
---has property
{ foo: 1 } -> templates
  when <|{foo:}> do 1!
  otherwise 0!
end !
=1
---has properties
{ foo: 1, bar: 3 } -> templates
  when <|{foo:, bar:}> do 1!
  otherwise 0!
end !
=1
---has not the third property
{ foo: 1, bar: 3 } -> templates
  when <|{foo:, bar:, qux:}> do 1!
  otherwise 0!
end !
=0
---has not the desired property
{ foo: 1, bar: 3 } -> templates
  when <|{qux:}> do 1!
  otherwise 0!
end !
=0
---has the desired property and value
{ foo: 1, bar: 3 } -> templates
  when <|{foo: <|=1>}> do 1!
  otherwise 0!
end !
=1
---has not the desired value
{ foo: 1, bar: 3 } -> templates
  when <|{foo: <|=3>}> do 1!
  otherwise 0!
end !
=0
---has the undesired property and value
{ foo: 1, bar: 3 } -> templates
  when <|{foo: <~|=1>}> do 1!
  otherwise 0!
end !
=0
---has not the undesired value
{ foo: 1, bar: 3 } -> templates
  when <|{foo: <~|=3>}> do 1!
  otherwise 0!
end !
=1
---read property
{ foo: 1, bar: 3 } -> $(bar:) !
=bar´3
---read property of property
{ foo: { bar: 3 }} -> $(foo:; bar:) !
=bar´3
---include other structure
{ bar: 2 } -> { foo: 5, $ } !
={ bar: 2, foo: 5 }
---put if absent
{ bar: 2 } -> { bar: 5, $ } !
={ bar: 2 }
---overwrite
{ bar: 2 } -> { $, bar: 5 } !
={ bar: 5 }
---no property
{ bar: 2, 1 -> templates when <|=0> do { foo: 5 } ! end } !
={ bar: 2 }
---include multiple structures
{ bar: 2, 1 -> templates { foo: 5 } ! { qux: 8 } ! end } !
={ bar: 2, foo: 5, qux: 8 }
---structure in structure prints correctly
{ foo: { bar: 5 } } !
={ foo: { bar: 5 } }
---has disallowed extra properties
{ foo: 1, bar: 3 } -> templates
  when <|{foo: VOID}> do 1!
  otherwise 0!
end !
=0
---has allowed extra properties
{ foo: 1, bar: 3 } -> templates
  when <|{foo:}> do 1!
  otherwise 0!
end !
=1
---does not have disallowed extra properties
{ foo: 1 } -> templates
  when <|{foo: VOID}> do 1!
  otherwise 0!
end !
=1
=1
---has allowed properties and matched allowed properties
{ foo: 1, bar: 3 } -> templates
  when <|{foo:, bar: <|..4> VOID}> do 1!
  otherwise 0!
end !
=1
---may have optional property
{ foo: 1, bar: 3 } -> templates
  when <|{foo:, ?bar: VOID}> do 1!
  otherwise 0!
end !
=1
---may be without optional property
{ foo: 1 } -> templates
  when <|{foo:, ?bar: VOID}> do 1!
  otherwise 0!
end !
=1
---matches optional property
{ foo: 1, bar: 3 } -> templates
  when <|{foo:, ?bar: <|..4>}> do 1!
  otherwise 0!
end !
=1
---does not match optional property
{ foo: 1, bar: 3 } -> templates
  when <|{foo:, ?bar: <|4..>}> do 1!
  otherwise 0!
end !
=0
---does not have matched optional property
{ foo: 1 } -> templates
  when <|{foo:, ?bar: <|4..>}> do 1!
  otherwise 0!
end !
=1
---read selection and next dimension
[3..9 -> {foo: 'a$;', bar: 'b$;'}] -> $([3, 5, 1]; bar:) !
=['b5', 'b7', 'b3']
---structure equals
{ foo: 1 } -> templates
  when <|={foo: 1}> do 1 !
  otherwise 0 !
end !
=1
---structure not equals
{ foo: 2 } -> templates
  when <|={foo: 1}> do 1 !
  otherwise 0 !
end !
=0
---structure equals unordered fields
{ foo: 1, bar: 2 } -> templates
  when <|={bar: 2, foo: 1}> do 1 !
  otherwise 0 !
end !
=1
