---empty array
[] !
=[]
---single element array
[1+2] !
=[3]
---simple array
[1,2,3] !
=[1, 2, 3]
---element chain
[2, 3, 4 -> templates
  $ + 1 ! $ + 3 !
end, 11 ] !
=[2, 3, 5, 7, 11]
---test array length literal true
[2, 3] -> templates
  when <|[](=2)> do 1 !
  otherwise 0 !
end !
=1
---test array length literal false
[2, 3, 4] -> templates
  when <|[](=2)> do 1 !
  otherwise 0 !
end !
=0
---test array length range true
[2, 3] -> templates
  when <|[](1..3)> do 1 !
  otherwise 0 !
end !
=1
---test array length range false
[2, 3, 4, 5] -> templates
  when <|[](1..3)> do 1 !
  otherwise 0 !
end !
=0
---read single value index
[2, 3, 4, 5] -> $(3) !
=4
---read single value index of defined array
a is [2, 3, 4, 5];
$a(3) !
=4
---send length message
[2, 3, 4, 5] -> $::length !
=4
---stream values
[3, 1, 9, 2, 7] -> templates
  @ set $(1);
  $... -> ! #
  $@ !
  when <|$@..> do @ set $;
end !
=9
---arrays autotype
{ foo: [6] } -> { foo: [3] } !
={ foo: [3] }
---arrays autotype is checked
{ foo: [6] } -> { foo: 3} !
=*TypeError
---read selection
[3..9] -> $([3, 5, 1]) !
=[5, 7, 3]
---read selection selection - TODO: do we want this?
[3..9] -> $([[3, 4], [4, 5], [1, 2]]) !
=[[5, 6], [6, 7], [3, 4]]
---read next dimension
[3..9 -> ['a$;', 'b$;']] -> $(2; 1) !
=a4
---read first dimension and selection
[3..9 -> ['a$;', 'b$;']] -> $(3; [2, 1]) !
=['b5', 'a5']
---read selection and next dimension
[3..9 -> ['a$;', 'b$;']] -> $([3, 5, 1]; 2) !
=['b5', 'b7', 'b3']
---read selection and dimensions and select again
[3..9 -> ['a$;', 'b$;']] -> $([3, 5, 1]; 2) -> $(3) !
=b3
---read range
[5..9] -> $(2..4) !
=[6, 7, 8]
